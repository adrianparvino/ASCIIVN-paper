# #+OPTIONS: toc:nil

#+LATEX_HEADER: \newcommand\nl{\\}
#+TITLE: Visual novel engine for textual displays

# #+TITLE: Are there bactrians or dromedaries in University of San Carlos:
# #+TITLE: Verification and meta-analysis of the supposed double hump in Computer
# #+TITLE: Science
#+AUTHOR: Adrian Parvin D. Ouano
#+EMAIL: adrianparvino@gmail.com

#+LATEX_CLASS_OPTIONS: [12pt]
#+LATEX_HEADER: \newif\ifexport
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage[final]{pdfpages}
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[natbibapa]{apacite}
#+LATEX_HEADER: \usepackage{ragged2e}
#+LATEX_HEADER: \usepackage{usebib}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage{glossaries}
#+LATEX_HEADER: \usepackage{titlesec}
#+LATEX_HEADER: \usepackage{tocloft}
#+LATEX_HEADER: \usepackage{etoc}
#+LATEX_HEADER: \usepackage{verbatim}
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \usepackage{pgfgantt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{ulem}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{enumitem}

#+LATEX_HEADER: \DeclarePairedDelimiter\floor{\lfloor}{\rfloor}

#+LATEX_HEADER: \setglossarysection{subsection}
#+LATEX_HEADER: \makeglossaries
#+LATEX_HEADER: \bibinput{Research}

# #+LATEX_HEADER: \exporttrue

#+LATEX_HEADER: \ifexport
#+LATEX_HEADER:   \makeatletter
#+LATEX_HEADER:   \patchcmd{\l@section}
#+LATEX_HEADER:      {\cftsecfont #1} %   search pattern
#+LATEX_HEADER:      {\cftsecfont {#1}} % replace by
#+LATEX_HEADER:      {} %                  success
#+LATEX_HEADER:      {} %                  failure
#+LATEX_HEADER:   \makeatother
#+LATEX_HEADER: \fi

#+LATEX_HEADER: \ifexport \renewcommand{\thesection}{\Roman{section}} \fi
#+LATEX_HEADER: \ifexport \usepackage{fontspec} \fi
#+LATEX_HEADER: \ifexport \setmainfont{Times New Roman} \fi
#+LATEX_HEADER: \ifexport \renewcommand{\baselinestretch}{2} \fi
#+LATEX_HEADER: \ifexport \titleformat{\section}[display]{\setstretch{1}\centering}{CHAPTER \thesection \quad}{0pt}{\MakeUppercase} \fi
#+LATEX_HEADER: \ifexport \titleformat{\subsection}{}{}{0in}{\uline} \fi
#+LATEX_HEADER: \ifexport \titleformat{\subsubsection}{}{}{0.5in}{\uline} \fi
#+LATEX_HEADER: \ifexport \setlength{\parindent}{0.5in} \fi
#+LATEX_HEADER: \ifexport \renewcommand{\cftdot}{} \fi
#+LATEX_HEADER: \ifexport \input{TitlePage.tex} \fi
#+LATEX_HEADER: \ifexport \renewcommand\cftsecpagefont{\textnormal}\fi
#+LATEX_HEADER: \ifexport \cftsetindents{section}{0em}{2em} \fi
#+LATEX_HEADER: \ifexport \cftsetindents{subsection}{0.5in}{2em} \fi
#+LATEX_HEADER: \ifexport \cftsetindents{subsubsection}{1in}{2em} \fi
#+LATEX_HEADER: \ifexport
#+LATEX_HEADER:   \makeatletter
#+LATEX_HEADER:   \newlength\mylength
#+LATEX_HEADER:   \setlength{\cftsecnumwidth}{1em}
#+LATEX_HEADER:   \settowidth\mylength{\cftsecpresnum\cftsecaftersnum\quad}
#+LATEX_HEADER:   \addtolength\cftsecnumwidth{\mylength}
#+LATEX_HEADER:   \renewcommand{\cftsubsecpresnum}{\begin{lrbox}{\@tempboxa}}
#+LATEX_HEADER:   \renewcommand{\cftsubsecaftersnum}{\end{lrbox}}
#+LATEX_HEADER:   \setlength{\cftsubsecnumwidth}{0pt}
#+LATEX_HEADER:   \renewcommand{\cftsubsubsecpresnum}{\begin{lrbox}{\@tempboxa}}
#+LATEX_HEADER:   \renewcommand{\cftsubsubsecaftersnum}{\end{lrbox}}
#+LATEX_HEADER:   \setlength{\cftsubsubsecnumwidth}{0pt}
#+LATEX_HEADER:   \makeatother
#+LATEX_HEADER: \fi

#+LATEX_HEADER: \renewcommand\contentsname{\clearpage\begin{center} \normalfont \normalsize \bfseries Table of Contents \end{center}}
#+LATEX_HEADER: \renewcommand\tocloftpagestyle{\thispagestyle{fancy}}

#+LATEX_HEADER: \newcommand{\citetitle}[1]{\usebibentry{#1}{title} \citep{#1}}
# Must check if it is an article or a book. Books are italicized while articles aren't.

#+LATEX_HEADER: \fancypagestyle{plain}{
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \renewcommand{\headrulewidth}{0pt}
#+LATEX_HEADER: }

#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \renewcommand{\headrulewidth}{0pt}
#+LATEX_HEADER: \fancyfoot[R]{\thepage}

#+LATEX_HEADER: \definecolor{dkgreen}{rgb}{0,0.6,0} 
#+LATEX_HEADER: \newcommand{\sectionbreak}{\clearpage \thispagestyle{empty}}
#+LATEX_HEADER: \lstset{frame=tb,
#+LATEX_HEADER:   language=C,
#+LATEX_HEADER:   aboveskip=3mm,
#+LATEX_HEADER:   belowskip=3mm,
#+LATEX_HEADER:   showstringspaces=false,
#+LATEX_HEADER:   columns=flexible,
#+LATEX_HEADER:   basicstyle={\small\ttfamily\setstretch{1}},
#+LATEX_HEADER:   numbers=none,
#+LATEX_HEADER:   numberstyle=\tiny\color{gray},
#+LATEX_HEADER:   keywordstyle=\color{blue},
#+LATEX_HEADER:   commentstyle=\color{dkgreen},
#+LATEX_HEADER:   stringstyle=\color{mauve},
#+LATEX_HEADER:   breaklines=true,
#+LATEX_HEADER:   breakatwhitespace=true,
#+LATEX_HEADER:   tabsize=3
#+LATEX_HEADER: }

# #+BEGIN_abstract
# This paper aims to verify the methodology of cite:dehnadi2006camel.
# They have made claims of the bimodality of the scores of the Computer Science course.
# This paper focuses on their use of the equality symbol(=) in their consistency tests and
# uses the arrow symbol(<-) as an experimental design.
# 37 samples were taken from Grade 12 Senior High School students of University of San Carlos: Talamban Campus.
# This paper failed to produce any significant difference between the results of the equality symbol(=) and the arrow symbol(<-).
#
# #+END_abstract

#+LATEX_HEADER: \renewcommand{\etocaftertitlehook}{\pagestyle{empty}}
#+LATEX_HEADER: \renewcommand{\etocaftertochook}{\pagestyle {empty}}
#+latex_header_extra: \newglossaryentry{hdl}{name={hardware description language},description={A language used for the development and simulation of hardware}}
#+latex_header_extra: \newglossaryentry{decouple}{name={decouple},description={Form a new interpretation despite having already having an old contradictory information}}

#+LATEX: \clearpage
#+LATEX: \pagestyle{fancy}
#+LATEX: \thispagestyle{empty}
#+LATEX: \setcounter{page}{1}
# #+LATEX: \twocolumn
# #+LATEX: \ifexport\onecolumn\fi
* Introduction
** Rationale
This research is an application of our Computer Programming course.
In the research, the American Standard Code for Information Interchange(hereinafter referred to ASCII) art is explored. 
This form of art was once prevalent however due to the increasing graphical capabilities of computers, it quickly subsided into a niche.
We aim to develop an engine which would convert visual images to ASCII art, and apply it to various forms of media,
such as visual novels, text-based games, or animations.
Theoretically, the produced code is also optimized for SIMD-capable processors, 
however the main target is the x86-64 class of processors which supports AVX2, as 
the data are 32-byte aligned and are grouped as 8 elements of 4-byte data structure, specifically \lstinline{int} and \lstinline{float}.

** Statement of the Problem
This study aims to integrate Visual images to two forms of ASCII art. Specifically, this study aims to:
1. Program a visual novel engine displaying ASCII art
2. Test if:
   1. The engine is fully functional
   2. The image is usable and understandable
   3. The engine can convert any visual images to ASCII art
3. Compare the visual image with the converted ASCII art

** Significance of the Study
This study contributes to the field of visual recognition.
The success of this study will provide clues on the information relevant to recognizability of images.
It also experiments with the mixture of two rendering methods and compositing it into one image in order to enhance the quality of the image.
Due to the inherent characteristics of the program, it also has the advantage of being able to be used in text-only displays
such as the HD44780 which is a controller for character-based liquid crystal displays, and older phones and pagers; and also be used in bad signal conditions.
ASCII art has long been used to visually represent complex structures on chat systems such as Internet Relay Chat, and
also in the days of modem as not only was the internet connection limited,
it was too slow to reasonably load images; without ASCII art,
complex structures would be impossible to transfer in a reasonable amount of time for real-time communication.

Facebook has created a neural network that detects the components of a scene and provides an automatic description, however,
it is unable to understand lower level constructs such as structures and context.
To provide an example, the neural network may output ``1 smiling person,'' 
however that gives no information on how the person smiled,
and even worse, it doesn't /show/ how the person looks like.
This research is able to alleviate that problem by re-creating the image.
If the image is accurate enough, it can also serve as a preview of the image.

** Scope and Limitation
The study will be conducted within a span of 3 months,
with a month dedicated to experimentation and a week for survey to receive feedback
regarding our product and will be aimed at sample who are experienced in either art or gaming.

The study is limited to the usage of the C programming language,
a mix of line and field art as other forms of computer art will not be studied and compared.
In addition, this study is focused on the creation of our product and is not meant to be compared to other researches.
We will, however, be comparing the results of the program to the original image,
in order to measure the clarity and the accuracy of the generated ASCII art.
Colors are also not explored in this research meaning that although the art scanned in the program is colored,
the converted ASCII art displayed will be only in black and white text.
* Review of Related Literature

American Standard Code for Information Interchange (hereafter referred
to as ASCII) is popularly used as a text file format in which 128
alphabetic, numeric, or special character is represented by 7-bit
binary numbers. Its prominent utilization is found in many operating
systems such as those that are UNIX or DOS-based citep:rouse2005ascii.

ASCII art employs the ASCII character set in creating images or
diagrams, ranging from simple representations of faces
(e.g. emoticons) to more complex renditions. This is used due to its
universality as a computer art form, meaning every computer system
capable of multi-line text display is able to display the art without
particular graphic file formats. Its file size is also significantly
smaller than any graphic file format citep:cjrandall2004faq.

cite:xu2010structure shows a new algorithm separate from SSIM in order to produce ASCII art.
The algorithm they produced mimics ``deformation,'' an ASCII artist technique that professional ASCII artists use;
it deforms the image and sacrifices visual accuracy in order to
make it clearer as the ASCII art ``pixels'' are inherently more limited than actual pixels.

Although it has advantages over the usage of actual images, the
generation of structure-based ASCII art may be challenging as the
reproduction and translation from image to text could distort the
resulting rendition. A factor that could affect this may be excessive
amounts of texture in the base images. This obstacle may be resolved
through separating the weak structure within the natural photos from
the original crowded texture, resulting in more distinguishable
results citep:xu2017ascii.

cite:ogrady2008automatic aims for a bitmap approach --
it produces ASCII art that is concerned about the shape of filled objects
rather than the outline of the objects.
ASCII art renders like this tend to be more appropriate for backgrounds,
where contrast is less important and visual clarity is sacrificed for a more scenic artwork.

cite:miyake2011interactive points out that different pictures have require different treatment and thus
created an interactive system to allow users to
choose the most appropriate rendering method for the given image.

cite:singh2015research states that C language will be utilized among the many programming languages available for the development of this project.
It is a structured and methodical language used both for operating systems (OS) and applications
with a wide following in the academic community.
It is one of the most important basic courses of study in science and engineering college.

C was developed at Bell Laboratories in 1972 by American computer scientist Dennis Ritchie.
Its features were derived from an earlier language called ``B,'' a derivative of Basic Combined Programming Language(BCPL) and
was originally invented for implementing UNIX operating system.
To this day, it is best known for its reliability, portability, flexibility, interactivity, modularity, efficiency, and effectiveness citep:singh2015research.

In cite:cprogramming, it is made known that the C language is a statically typed imperative language.
It features much of basic and derived data types, structures and unions, operators, flow controls, and more.
It is closely linked to the computer's hardware, thus changing its performance based on whether the system is in 32-bit or 64-bit,
which may result in different data type representation.

For many decades, C has been used as a base language for many video games, with or without graphics.
An ideal and completely functional game is a perfect combination of actions-reactions or event-responses the responses are based on the most-recently occurred event.
C's basic methodical and systematic nature therefore makes it efficient for this logic development citep:jacob2013.

Visual Novels are a medium using the narrative fashion of Literature,
however in a digital format that could technically considered a video game.
They have a tendency to put more emphasis on the plot and on characterization,
in preference to on action scenes, like interactive fiction and more so than Adventure Games.
Visual Novels are successfully seen as a virtual evolution of Choose Your Own Adventure books,
with music, pictures, and occasionally even voice acting or movies.
However, unlike most Choose Your Own Adventure books,
they normally branch off into distinct storylines early on,
and may have plenty more choice points (since they're virtual and consequently do not suffer from physical barriers.)
Puzzle, quests and escape games are often embedded within the plot to be able to strengthen the story-line(s) citep:visualnovel.

cite:crimmins2016 states that visual novels aren't a static object.
They've changed a lot since their inception,
so limiting them to just one definition risks overlooking important historical developments.
In fact, when we examine visual novel history in greater detail,
we see the genre operating on at least two distinct definitions.
Where earlier visual novels told their stories primarily through manga-like composition,
the modern visual novel (where character portraits tell the story through theatrical presentation) was a later development.
Each type had their own unique origins, and each had a significant impact on how visual novels conveyed narrative.

cite:cavallaro2010anime states that the visual novel typically articulates its narrative
by means of extensive text conversations complemented by lovingly depicted generic backgrounds and dialogue boxes
with characters sprites determining the speaker superimposed upon them.

cite:nagle2001 games can be a very effective way to develop
metastrategies. It means trying out a lot of strategies and seeing if
they work, allocating resources and role-playing. Perhaps the very act
of role-playing in a game context helps a player to adopt multiple
viewpoints.

cite:evans2008 Video games provide a diverse set of experiences and
related activities and are part of the lives of almost all teens in
America. To date, most video game research has focused on how games
impact academic and social outcomes.

** Definitions
*** Extended Real Numbers
#+LATEX: \newcommand\R{\mathbb{R}}
#+LATEX: \newcommand\eR{\overline{\R}}
The extended positive real numbers, \(\R\) are obtained by
\[\eR = \R \cup \{\infty\} = [0, \infty]\]
with the following operations:
#+ATTR_LATEX: :environment enumerate
#+ATTR_LATEX: :options [label={(\arabic*)}]
1) *Addition* \(\forall x \in \eR: x + \infty = \infty\)
1) *Subtraction* \(\forall x \in \eR: x - \infty = -\infty\) 
1) *Multiplication* \(\forall x \in \eR: x * \infty = \infty\)
1) *Division* \(\forall x \in \eR: x / \infty = 0\)
and has the usual ordering of \(\mathbb{R}\) along with the following:
\[\forall x \in \eR: x \leq \infty\]

*** Extended Quasimetric Space
The extended quasimetric space therefore, is a pair \((M, d)\), where \(M\) is a set and \(d : M \times M \to \eR\)
with the following properties.
1) *Non-negativity* \(\forall z, z' \in Z: \rho(z, z') \geq 0\)
2) *Indiscernability* \(\forall z, z' \in Z: \rho(z, z') = 0 \iff z = z'\)
3) *Triangle inequality* \(\forall x, y, z \in Z: \rho(x, z) \leq \rho(x, y) + \rho(y, z) \)

* Methodology
** Optimizations
\newtheorem{theorem}{Theorem}
#+NAME: theorem:summation
#+BEGIN_theorem
Given a 0-indexed list where the length is a multiple of a, the summation formula
\begin{align*}
\sum\limits_{i = 0}^{n - 1} x_{i}
\end{align*}
is equivalent to
\begin{align*}
\sum\limits_{i' = 0\mathstrut}^{a} \sum\limits_{i = 0\mathstrut}^{\frac{n}{a}} x_{ai + i'}
\end{align*}
#+END_theorem

#+NAME:theorem:sortedlist
#+BEGIN_theorem
Given an element, \(a \in \R\),
we can once again define a function \(f_a : \R \to \eR\), that maps \(b \mapsto d(b,a)\).
Now, given points \(x, y \in \R\), if \(f_a x < f_a y\) then x is the optimal element.

#+END_theorem
** Luminosity
The luminosity or brightness of the two sprites are compared to one another and
the following metric is used in order to determine which sprite to use.
The definition used for luminosity in this study is the arithmetic mean:
\begin{align}
\frac{1}{n}\sum\limits_{i = 0}^{n - 1} x_{i}
\end{align}
of the pixel values; where 
\(x_i\) is the \(i\)th pixel value; and
\(n\) is the number of pixels in the window.
Applying Theorem [[theorem:summation]], with \(a = 8\) for AVX2, we get the following:
\begin{align}
\frac{1}{n} \sum\limits_{i' = 0\mathstrut}^{8} \sum\limits_{i = 0\mathstrut}^{\frac{n}{8}} x_{8i + i'}
\end{align}

# TODO: GCC auto-vectorization
In order to increase the performance, we take advantage of GNU Compiler Collection(hereinafter referred to as GCC)'s auto-vectorization.
This results in the following code
\begin{lstlisting}
for (i = 0;
      i < length(xarray);
      i += 8)
  {
   for (i_ = 0; i_ < length(partialsumx); ++i_)
    {
  	  partialsumx[i_] += xarray[i + i_];
  	  partialsumy[i_] += yarray[i + i_];
    }
  }
  for (int i = 0; i < 3; ++i)
	  {
		  
		  hadd(partialsumx);
		  hadd(partialsumy);
	  }
  for (int i = 0; i < 8; ++i)
	  {
		  partialsumx[i] /= n;
		  partialsumy[i] /= n;
	  }
  mean_x = partialsumx[0];
  mean_y = partialsumy[0];
\end{lstlisting}

A cache is built and stored in an ordered array and 
a linear search is then performed and 
the most luminous character glyph 
less than the luminosity of the region glyph is selected as the most appropriate glyph.

In order to choose the most appropriate glyph, 
an extended quasimetric space is defined as follows:
\begin{equation}
{
\setstretch{1.0}
\begin{split}
d : \mathbb{R} \times \mathbb{R} \to [0, \infty]\\
d(x, y) =
\begin{cases}
y - x & x \leq y\\
\infty & y < x
\end{cases}
\end{split}
}
\end{equation}
We can observe that \(x \leq y < z \implies d(x, y) < d(z, y)\) 
due to the ordering \(\forall x \in \eR: x \leq \infty\). 
Applying theorem [[theorem:sortedlist]], we can obtain the optimal element by simply checking the elements themselves,
that is given that \(y\), our focal element, if our test element, \(x_i\) is less than \(y\) 
while the next element \(x_{i+1}\) is greater than \(y\) then \(x_i\) is the optimal element.
This is visible in the following code:
\begin{lstlisting}
qsort(cache, font_charset->n, sizeof(*cache), cmp_cache);
for (size_t i = 0; i < dest->width; ++i)
	{
		for (size_t j = 0; j < dest->height; ++j)
			{
				size_t k = 0;
				while (k < LENGTH(cache) &&
				       cache[k].value < *index_gray((struct imagebuffer *) dest, i, j))
					{
						++k;
					}
				--k;
				*index_gray((struct imagebuffer *) dest, i, j) = cache[k].character;
			}
	}
\end{lstlisting}
where \lstinline{cmp_cache} is defined as
\begin{lstlisting}
int
cmp_cache(const void *x, const void *y)
{
	return ceil(((const struct cache *) x)->value -
							((const struct cache *) y)->value);
}
\end{lstlisting}

** Structural SIMilarity (SSIM)
The Structural SIMilarity(hereinafter referred to as SSIM) method is used in order to not only gauge the luminosity of the sprites 
but also the contrast and structural similarity.
SSIM is not a single metric but rather a combination of 3 metrics -- 
luminosity, calculated as the arithmetic mean; 
contrast, calculated as the population variance; and
structure, calculated as the covariance of the 2 sprites.

The formula for luminosity has already been presented;
both contrast and structure relies on the covariance algorithm.
The moment is calculated using the formula:
\begin{equation}
C = \sum\limits_{i=1}^n (x_i - \overline{x})(y_i - \overline{y})
\end{equation}
where \(\overline{x}_n\) and \(\overline{y}_n\) are the means as calculated in the previous section,
and the covariance being calculated as
\begin{equation}
\sigma_{XY} = \text{Cov}(X,Y) = \frac{C_n}{n}
\end{equation}
and the variance being calculated as
\begin{equation}
\sigma_X^2 =\text{Var}(X) = \text{Cov}(X,X)
\end{equation}
Once again, to exploit GCC's autom-vectorization, we apply Theorem [[theorem:summation]], which results in the following definition:
\begin{equation}
C = \sum\limits_{i' = 0\mathstrut}^{8} \sum\limits_{i = 0\mathstrut}^{\frac{n}{8}} (x_{8i + i'} - \overline {y})(y_{8i + i'} - \overline {y})
\end{equation}
And the equivalent code is:
\begin{lstlisting}
for (i = 0;
     i < length(xarray);
     i += 8)
 {
  for (i_ = 0; i_ < length(partialsumx); ++i_)
	  {
		  float xdiff = xarray[i + i_] - partialsumx[i_];
		  float ydiff = yarray[i + i_] - partialsumy[i_];
			
		  partialsumvarx   [i_] += xdiff*xdiff;
		  partialsumvary   [i_] += ydiff*ydiff;
		  partialsumcovarxy[i_] += xdiff*ydiff;
	  }
 }
for (int i = 0; i < 8; ++i)
 {
  var_x    += partialsumvarx   [i];
  var_y    += partialsumvary   [i];
  covar_xy += partialsumcovarxy[i];
 }
// Account for 0-padding
var_x    += pad*mean_x*mean_x;
var_y    += pad*mean_y*mean_y;
covar_xy += pad*mean_x*mean_y;
\end{lstlisting}

Finally, the luminosity, contrast and structure are calculated using
\begin{align}
\begin{split}
l(x,y)&=\frac{2\mu_x\mu_y + c_1}{\mu^2_x + \mu^2_y + c_1}\\
c(x,y)&=\frac{2\sigma_x\sigma_y + c_2}{\sigma^2_x + \sigma^2_y + c_2}\\
s(x,y)&=\frac{2\sigma_{xy} + c_3}{\sigma_x \sigma_y + c_3}
\end{split}
\end{align}
where
\(c_1 = (k_1L)^2\),
\(c_2 = (k_2L)^2\),
\(c_3 = \frac{c_2}{2}\), and
\(L = 2^n - 1\) where \(n\) refers to the number of bits per pixel.

The SSIM formula is defined by the luminosity, contrast and structure.
\begin{equation}
\text{SSIM}(x,y) = \left[ l(x,y)^\alpha \cdot c(x,y)^\beta \cdot s(x,y)^\gamma \right]
\end{equation}
where the weights are typically \(\alpha = \beta = \gamma = 1\).

** Testing
Portable Network Graphics(hereinafter referred to as PNG, or png) images are taken from the Google Open Images database
and the ASCII art is renderer is run in batch mode, a mode that performs the rendering operation to multiple files in order to assess the robustness of the program.
Technically, this does not prove that the program is correct but it will allow us to assume with high probability that it is either correct or incorrect.
As natural images are often encoded as Joint Photographic Experts Group(JPEG) files, we will use ImageMagick's \lstinline{convert} tool.

** Survey
Following the works of cite:xu2010structure, 
participants will be asked to rate on a 1-6 scale on the accuracy and clarity of the generated ASCII art, a pre-rendered versions of other ASCII arts.
Once the data is collected, the data is treated in two ways in order to objectively measure on how well it compares to the source image
and how well it compares to other rendering methods.
*** Sampling Method
Quota sampling was chosen for selecting the participants of our survey.
This was employed to ensure that people with our desired characteristics will be able to participate in our survey and give their opinion as to whether our research product is successful in reproducing an image in the ASCII format.
Our target population will be the entire school population and will be divided into two categories, the first being those who are knowledgeable and well-versed in ASCII art and those who don’t know or are indifferent about ASCII art in general.
As for the location of our surveys, it will take place at high-density population areas inside the University of San Carlos both in the North Campus and the Talamban Campus.

For the sample size, we have determined that at most, we will have 60 people participate in our survey, with 30 people in each of our strata.
This is because, for the sake of cost-efficiency, we are following the central limits theorem, 
which states that a large sample size is approximately normally distributed regardless of the distribution of population one samples from.
*** Survey form
The survey form consists of the source dog image and the rendered image.
The survey questions consist of a 1-6 scale measuring the 
perceived clarity of the generated ASCII art 
and its accuracy to the source image.
*** Efficiency
The efficiency is calculated using the following formula:
\begin{equation}
\textrm{Efficiency} = \frac{\textrm{Acc}*\textrm{Clarity}}{t}
\end{equation}
where \(t\) refers to the time to render the image.

*** Comparison to other rendering methods
To compare it with other rendering methods,
the mean and the standard deviation are calculated, and
we will perform the difference of two means test.


#+LATEX: \raggedright
#+LATEX: \clearpage
#+LATEX: \addcontentsline{toc}{section}{REFERENCES}
#+LATEX: \renewcommand{\refname}{REFERENCES}
#+LATEX: \ifexport \setstretch{1} \fi
#+LATEX: \ifexport \setlength{\bibsep}{12pt} \fi
bibliography:Research.bib
bibliographystyle:apacite
#+LATEX: \clearpage

* Schedule of Activities
\begin{figure}[H]
\begin{ganttchart}{0}{23}
% %labels
\gantttitle{2017}{12}
\gantttitle{2018}{12} \\
\gantttitle{Nov}{6}
\gantttitle{Dec}{6}
\gantttitle{Jan}{6}
\gantttitle{Feb}{6} \\
% 
% %tasks
\ganttbar{Implementation of Engine}{0}{16} \\
\ganttbar{SSIM}{0}{4} \\
\ganttbar{Luminosity}{0}{4} \\
\ganttbar{PNG loading}{5}{8} \\
\ganttbar{Transition}{9}{12} \\
\ganttbar{Dialog}{13}{16} \\
\ganttbar{Feedback}{17}{20} \\
\ganttbar{First Batch}{17}{18} \\
\ganttbar{Second Batch}{19}{20} \\
\ganttbar{Implementation of Slides}{21}{23}
% 
\end{ganttchart}
\caption{Timeline}
\end{figure}

# Local Variables:
# mode: org
# org-latex-pdf-process: ("lualatex -interaction nonstopmode -output-directory %o %f" "bibtex %b"  "makeglossaries %b" "lualatex -interaction nonstopmode -output-directory %o %f" "lualatex -interaction nonstopmode -output-directory %o %f")
# org-latex-caption-above: nil
# DISABLED: org-latex-pdf-process: ("pdflatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "makeglossaries %b" "pdflatex -interaction nonstopmode -output-directory %o %f" "pdflatex -interaction nonstopmode -output-directory %o %f")
# End:
